(py310) C:\projetos\EngeGOM\7_dashboards>python prompt.py
.cursor/
.streamlit/
assets/
config/
libs/
    ├── componentes/
    ├── componentes.py
    ├── db.py
    ├── logger.py
    ├── menu.py
main.py
testes/
    ├── test_db.py
--------------------------------------------------
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
1 - Conteúdo do arquivo componentes.py:
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
from typing import Dict
import streamlit as st
from datetime import datetime
import plotly.graph_objects as go


# função para criar um card com um título e um valor
def show_header(user_info: Dict):
    """
    Exibe o cabeçalho do dashboard.
    
    Args:
        user_info: Informações do usuário
    """
    
    # Cria as colunas com proporções ajustadas
    col1, col2, col3 = st.columns([0.7, 2.3, 1])
    
    with col1:
        st.image("assets/logo.png", width=70)
    
    with col2:
        st.write(f"Dashboard - Usina {user_info['tabela'].replace('cgh_', '').title()}")

    with col3:
        if st.button("🚪 Logout", type="secondary"):
            st.experimental_rerun()

def create_energy_card(description, value, data_hora, medida, percentual, value_max=None, value_min=None):
    """
    Creates a styled card displaying energy production information.

    Parameters:
    description (str): The description text (e.g., "Produção Energia - 09/2025")
    value (str): The value to display (e.g., "60 MWh")

    Returns:
    None: Displays the card directly in the Streamlit app
    """
    # Apply the dark card style
    card_style = """
        <style>
        .energy-card {
            background-color: #1E1E1E;
            color: white;
            padding: 20px;
            border-radius: 20px;
            margin: 10px 0px;
            max-width: 500px;
        }
        .description {
            font-size: 20px;
            font-weight: 500;
            margin-bottom: 10px;
        }
        .value {
            font-size: 32px;
            font-weight: 600;
        }
        .percentual {
            font-size: 14px;
            color: #A8EF6A;
            font-weight: 500;
        }
        </style>
    """

    # Create HTML for the card
    if value_max is not None and value_min is not None:
        max_min = f"Máx: {value_max} - Mín: {value_min}"
    else:
        max_min = ""
    if percentual is not None:
        # preciso do icon verde ou vermelho
        cor = "#A8EF6A" if percentual > 0 else "#EF6A6A"
        icon_color = "🔼" if percentual > 0 else "🔽"
        percentual = f"{icon_color} {percentual} cm"

    else:
        percentual = ""
        cor = "#808495"

    card_html = f"""
        <div class="energy-card">
            <div class="description">{description} - <span style="font-size: 14px; color: #808495;">Atual.: {data_hora}</span></div>
            <div class="value">
                {value}
                <span style="font-size: 20px; color: #808495;">{medida}</span>
                <span style="font-size: 14px; color: #3A608F;">{max_min}</span>
                <span style="font-size: 14px; color: {cor};">{percentual}</span>
            </div>
        </div>
    """
    return st.markdown(card_style + card_html, unsafe_allow_html=True)


def calculadora_ganho(energia_gerada: float = 0, valor_megawatt: float = 450):
    """
    Calcula o ganho de energia em reais.
    """
    st.markdown("""
        <style>
        /* Container da Calculadora */
        .calculadora-container {
            background-color: rgba(30, 30, 30, 0.8);
            border-radius: 8px;
            padding: 1.5rem;
            margin: 1rem 1rem;
            backdrop-filter: blur(10px);
        }

        /* Campos de entrada */
        .stNumberInput > div > div {
            background-color: #1E1E1E !important;
            border: 1px solid #3E3E3E !important;
            color: white !important;
        }

        /* Resultado */
        .resultado-calculadora {
            background-color: #2E2E2E;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
            text-align: center;
        }

        .resultado-valor {
            color: #4C6EF5;
            font-size: 1.5rem;
            font-weight: 500;
            margin: 0;
        }

        .resultado-texto {
            color: #808495;
            font-size: 0.85rem;
            margin-top: 0.25rem;
        }
        </style>
    """, unsafe_allow_html=True)

    with st.container():
        energia = st.number_input("Energia gerada (MWh)", value=energia_gerada, key="energia_gerada")
        valor = st.number_input("Valor do megawatt (R$)", value=valor_megawatt, key="valor_megawatt")

        try:
            # Calcula o ganho inicial
            ganho = energia * valor

            # Se o botão for clicado, recalcula com os valores atuais
            if st.button("Calcular"):
                energia = st.session_state.energia_gerada
                valor = st.session_state.valor_megawatt
                ganho = energia * valor

            st.markdown(f"""
                <div class="resultado-calculadora">
                    <p class="resultado-valor">R$ {ganho:,.2f}</p>
                    <p class="resultado-texto">Ganho estimado</p>
                </div>
            """, unsafe_allow_html=True)

        except ValueError:
            st.error("Por favor, insira valores numéricos válidos")



import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np

def criar_grafico_nivel(df, colunas_nivel, coluna_data=None, titulo="Níveis de Água"):
    """
    Cria um gráfico de níveis de água otimizado para visualizar pequenas variações.

    Parameters:
    -----------
    df : pandas.DataFrame
        DataFrame contendo os dados de nível
    colunas_nivel : list
        Lista contendo os nomes das colunas de nível no dataframe
        Ex: ['nivel_montante', 'nivel_jusante']
    coluna_data : str, opcional
        Nome da coluna que contém as datas/horas (se None, usará o índice do dataframe)
    titulo : str, opcional
        Título do gráfico (default: "Níveis de Água")
    """
    # Criar figura
    fig = go.Figure()

    # Determinar o eixo X (data/hora)
    if coluna_data and coluna_data in df.columns:
        x_values = df[coluna_data]
    else:
        x_values = df.index

    # Remover a coluna de data/hora da lista de colunas de nível, se estiver presente
    colunas_nivel_plot = [col for col in colunas_nivel if col != coluna_data]

    # Verificar quais colunas são numéricas
    colunas_numericas = []
    for coluna in colunas_nivel_plot:
        if coluna in df.columns:
            # Verificar se a coluna é numérica
            if np.issubdtype(df[coluna].dtype, np.number):
                colunas_numericas.append(coluna)

                # Criar nome de exibição mais amigável
                nome_exibicao = coluna.replace('_', ' ').title()

                fig.add_trace(go.Scatter(
                    x=x_values,
                    y=df[coluna],
                    mode='lines',
                    name=nome_exibicao,
                    line=dict(width=2)
                ))

    # Calcular limites dinâmicos para o eixo Y apenas com colunas numéricas
    if colunas_numericas:
        # Calcular mínimo e máximo de forma segura
        y_min = df[colunas_numericas].min().min()
        y_max = df[colunas_numericas].max().max()

        # Calcular intervalo de forma segura
        intervalo = float(y_max) - float(y_min)

        # Definir margem apropriada
        if intervalo < 0.5:
            margem = 0.1
        else:
            # Margem de 2% do intervalo
            margem = intervalo * 0.02

        y_min = float(y_min) - margem
        y_max = float(y_max) + margem
    else:
        # Valores padrão se não houver colunas numéricas válidas
        y_min = 0
        y_max = 10

    # Configurar layout do gráfico
    fig.update_layout(
        title=titulo,
        xaxis_title='Data/Hora',
        yaxis_title='Nível (m)',
        yaxis=dict(
            range=[y_min, y_max],
            tickformat='.3f',  # Mostrar 3 casas decimais
        ),
        plot_bgcolor='rgb(17, 17, 17)',
        paper_bgcolor='rgb(17, 17, 17)',
        font=dict(color='white'),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(l=10, r=10, t=50, b=50),
        hovermode='x unified'
    )

    return fig
Quantidade de linhas do arquivo componentes.py: 267 totalizando 267 linhas.
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
2 - Conteúdo do arquivo db.py:
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
'''
Conexão com o banco de dados MySQL
'''
import mysql.connector
from mysql.connector import Error
import logging
import pandas as pd
import traceback
from datetime import datetime, timedelta
import time


def desempenho(funcao):
    def wrapper(*args, **kwargs):
        print(f"      Iniciando a função {funcao.__name__}")
        inicio = time.time()
        resultado = funcao(*args, **kwargs)
        fim = time.time()
        print(f"      Tempo de execução: {fim - inicio} segundos")
        print('--------------------------------')
        return resultado
    return wrapper


def conectar_db(host, user, password, database, port):
    try:
        print(f"Conectando ao banco de dados {database} em {host}:{user}, {port}")
        conexao = mysql.connector.connect(host=host, user=user, password=password, database=database, port=port)
        print(f"Conexão estabelecida com sucesso")
        return conexao
    except Error as e:
        print(f"Erro ao conectar ao banco de dados: {e}")
        return None

# @desempenho
def read_all_data(conexao, table_name):
    try:
        query = f"SELECT * FROM {table_name}"
        cursor = conexao.cursor()
        cursor.execute(query)
        resultado = cursor.fetchall()
        df = pd.DataFrame(resultado, columns=[i[0] for i in cursor.description])
        return df
    except Error as e:
        return pd.DataFrame({'Erro ao ler dados da tabela': [e]})

# @desempenho
def read_where_data(conexao, table_name, date_initial, date_final, colunas='*'):
    try:
        if not colunas == '*':
            colunas = ','.join(colunas)

        query = f"SELECT {colunas} FROM {table_name} WHERE data_hora BETWEEN '{date_initial}' AND '{date_final}'"
        cursor = conexao.cursor()
        cursor.execute(query)
        resultado = cursor.fetchall()
        df = pd.DataFrame(resultado, columns=[i[0] for i in cursor.description])
        return df
    except Error as e:
        return pd.DataFrame({'Erro ao ler dados da tabela': [e]})

# @desempenho
def columns_table(conexao, table_name):
    try:
        query = f"SHOW COLUMNS FROM {table_name}"
        cursor = conexao.cursor()
        cursor.execute(query)
        resultado = cursor.fetchall()
        df = pd.DataFrame(resultado, columns=[i[0] for i in cursor.description])
        return df
    except Error as e:
        return pd.DataFrame({'Erro ao ler dados da tabela': [e]})

@desempenho
def dados(conexao, table_name, colunas_energia, colunas_nivel, periodo='M', janela=180):
    try:
        # Montar a query
        energia_total = total_gerado(conexao, table_name, colunas_energia)
        nivel, describe_nivel, percentual_nivel = description_nivel(conexao, table_name, colunas_nivel)
        energia_mensal = description_energia(conexao, table_name, colunas_energia, periodo=periodo, janela=janela)

        dict_return = {
            'Produção total': {
                'value': round(float(energia_total['total'].values[0]), 2),
                'value_max': None,
                'value_min': None,
                'percentual': None,
                'description': 'Produção total',
                'data_hora': energia_total['data_hora'][0].strftime('%d/%m/%Y %H:%M:%S'),
                'medida': 'MWh',
            },
        }

        for value in describe_nivel.columns:
            describe_value = f"Média {value}".replace('_', ' ').replace('nivel', 'nível')

            dict_return[describe_value] = {
                'value': round(float(describe_nivel.loc['mean', value]), 2),
                'value_max': round(float(describe_nivel.loc['max', value]), 2),
                'value_min': round(float(describe_nivel.loc['min', value]), 2),
                'percentual': percentual_nivel,
                'description': describe_value,
                'data_hora': energia_total['data_hora'][0].strftime('%d/%m/%Y %H:%M:%S'),
                'medida': 'm',
            }

        return energia_total, nivel, describe_nivel, energia_mensal, dict_return


    except Exception as e:
        print(f"Erro ao calcular dados do card: {str(e)}")
        return {}


# @desempenho
def total_gerado(conexao, table_name, colunas):
    try:
        # Montar a query
        cursor = conexao.cursor()
        columns_select = ','.join(colunas)
        if len(colunas) == 2:
            conditions = f"{colunas[1]} IS NOT NULL"
        else:
            conditions = ' AND '.join(f"{col} IS NOT NULL" for col in colunas[1:])
        query = f"SELECT {columns_select} FROM {table_name} WHERE {conditions} ORDER BY {colunas[0]} DESC LIMIT 1"

        # Executar a query
        cursor.execute(query)
        result = cursor.fetchall()

        # Obter os nomes das colunas do cursor.description
        column_names = [i[0] for i in cursor.description]
        df = pd.DataFrame(result, columns=column_names)
        df['total'] = df[colunas[1:]].sum(axis=1)

        return df

    except Exception as e:
        return pd.DataFrame({'Erro ao ler dados da tabela': [e]})


# @desempenho
def description_nivel(conexao, table_name, colunas, tempo=25):
    try:
        # configurar o período de 30 dias e colunas
        date_initial = datetime.now() - timedelta(hours=tempo)
        date_final = datetime.now()
        df_nivel = read_where_data(conexao, table_name, date_initial, date_final, colunas)

        # calcular a variação percentual na ultima hora
        date_initial = datetime.now() - timedelta(minutes=15)
        date_final = datetime.now()
        df_nivel_15min = df_nivel[df_nivel['data_hora'] >= date_initial]
        percentual = df_nivel_15min[colunas[1]].values[-1] - df_nivel_15min[colunas[1]].values[0]
        percentual = round(percentual * 100, 2)

        df_nivel_ = df_nivel.copy()

        df_nivel.drop(columns=['data_hora'], inplace=True)
        describe = df_nivel.describe()

        return df_nivel_, describe, percentual
    except Exception as e:
        return pd.DataFrame({'Erro ao ler dados da tabela': [e]})

# @desempenho
def description_energia(conexao, table_name, colunas, periodo='D', janela=30):
    '''
    Função para descrever os dados de energia
    Retorna:
        df: DataFrame com o valor mensal de energia de todos os meses para cada coluna
    '''
    try:
        # configurar query
        date_initial = datetime.now() - timedelta(days=janela)
        date_final = datetime.now()
        df_original = read_where_data(conexao, table_name, date_initial, date_final, colunas)

        df = calcular_energia_acumulada(df_original, colunas, periodo)
        return df
    except Exception as e:
        return pd.DataFrame({'Erro ao ler dados da tabela': [e]})

# @desempenho
def calcular_energia_acumulada(df, colunas, periodo):

    print('periodo', periodo)

    if periodo == 'D':
        # Agrupa por dia e pega o último valor de cada dia para cada coluna
        colunas_energia = [col for col in colunas if 'energia' in col]
        df_diario = df.groupby(df['data_hora'].dt.date).last()

        # Calcular a diferença para cada coluna de energia
        for col in colunas_energia:
            for i in range(1,len(df_diario)):
                df_diario.loc[df_diario.index[i], f'prod_{col}'] = df_diario[col].values[i] - df_diario[col].values[i-1]

        return df_diario

    if periodo == 'M':
        colunas_energia = [col for col in colunas if 'energia' in col]

        # Criar chave ano-mês para agrupar corretamente pelos meses
        df['ano_mes'] = df['data_hora'].dt.strftime('%Y-%m')

        # Agrupar pela chave ano-mês e pegar o último registro de cada mês
        df_mensal = df.groupby('ano_mes').last()

        # Calcular a diferença para cada coluna de energia
        if len(df_mensal) < 6:
            # registrar o mês anterior com o valor 0
            last_month = df_mensal.index[0]
            after_last_month = datetime.strptime(last_month, '%Y-%m') - timedelta(days=30)
            after_last_month = after_last_month.strftime('%Y-%m')
            for col in colunas_energia:
                df_mensal.loc[after_last_month, col] = 0
            df_mensal = df_mensal.sort_index()


        for col in colunas_energia:
            for i in range(1,len(df_mensal)):
                df_mensal.loc[df_mensal.index[i], f'prod_{col}'] = df_mensal[col].values[i] - df_mensal[col].values[i-1]

        # eliminar as linhas que tem None
        df_mensal = df_mensal.dropna(axis=0)

        return df_mensal

    return df




'''

Com base no dataframe df_original, preciso calcular a energia acumulada que é a diferença entre o valor atual e o valor anterior,
por que o valor retornado sempre é o acumulado (Soma do atual com o anterior).

'''

















Quantidade de linhas do arquivo db.py: 256 totalizando 523 linhas.
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
3 - Conteúdo do arquivo logger.py:
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨

Quantidade de linhas do arquivo logger.py: 0 totalizando 523 linhas.
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
4 - Conteúdo do arquivo menu.py:
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨



Quantidade de linhas do arquivo menu.py: 2 totalizando 525 linhas.
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
5 - Conteúdo do arquivo main.py:
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
'''
Como criar um projeto que descreve um dashboard com streamlit que se conecta em diferentes bancos de dados e mostra uma interface com filtros e gráficos, para CGH e PCH?
'''
import streamlit as st
import yaml
from dotenv import load_dotenv
from datetime import datetime, timedelta
import streamlit.components.v1 as components
import plotly.express as px
import pandas as pd

from libs.db import (
    conectar_db,
    read_all_data,
    read_where_data,
    columns_table,
    dados,
    description_nivel,
    description_energia
)
from libs.componentes import (
    create_energy_card,
    criar_grafico_nivel
)
import os
import base64

# Configuração da página
st.set_page_config(
    page_title="EngeGOM",
    page_icon="🧊",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Remove o botão Deploy e outros elementos do menu e ajusta o padding
st.markdown("""
    <style>
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        header {visibility: hidden;}

        /* Remove espaço em branco no topo */
        .block-container {
            padding-top: 1rem !important;
            padding-bottom: 0rem !important;
        }

        /* Ajusta o header principal */
        [data-testid="stHeader"] {
            padding-top: 0rem !important;
            padding-bottom: 0rem !important;
        }

        /* Remove padding do container principal */
        .main > div {
            padding-top: 0rem !important;
        }

        /* Ajusta elementos dentro do header */
        .stTitle, .stHeader {
            margin-top: 0 !important;
            padding-top: 0 !important;
        }

        /* Remove padding do sidebar */
        [data-testid="stSidebar"] {
            padding-top: 0rem !important;
        }

        /* Ajusta o container do título */
        .css-1dp5vir {
            padding-top: 0 !important;
            margin-top: 0 !important;

        .main-container {
            border: 2px solid #00e1ff;
            border-radius: 15px;
            padding: 10px;
            margin: 5px;
        }
    </style>
""", unsafe_allow_html=True)

load_dotenv()

cont = 0
# Inicializar session_state
if 'logado' not in st.session_state:
    st.session_state['logado'] = False

# Carregar configurações
with open("config/usuarios_usinas.yaml", "r") as file:
    config = yaml.safe_load(file)

# variaveis de configuração
usinas = list(config['usinas'].keys())

def login(config, usinas):
    # with st.container(border=True):
    st.title("EngeGOM - Login")
    usina = st.selectbox("Selecione a usina", usinas)
    usuario = st.text_input("Usuário", value="admin")
    senha = st.text_input("Senha", type="password", value="admin")
    login_btn = st.button("Login")
    if login_btn:
        if usuario == 'admin' and senha == 'admin':
            st.session_state['logado'] = True
            st.session_state['usina'] = usina
            st.session_state['load_data'] = False
            st.rerun()
        else:
            st.error("Usuário ou senha inválidos")

def logout():
    st.session_state.clear()
    st.rerun()

def menu_principal(config, usina):
    '''Menu principal do dashboard'''

    col1, col2, col3, col4 = st.columns([1, 6, 1, 4])
    with col1:
        st.image("assets/logo.png", width=100)
    with col2:
        st.markdown(f"<h2 style='text-align: left; margin-top: 0;'>Dashboard {usina}</h2>", unsafe_allow_html=True)
    with col3:
        st.write(" ")
        logout_btn = st.button("Logout", use_container_width=True)
        if logout_btn:
            logout()

def carregar_dados(usina, periodo='M', janela=180):
    conexao = conectar_db(usina['ip'], usina['usuario'], usina['senha'], usina['database'], usina['port'])
    if not conexao is None:
        colunas_energia = list(usina['energia'].values())
        colunas_nivel = list(usina['nivel'].values())
        if periodo == 'Mensal':
            periodo = 'M'
        else:
            periodo = 'D'
        energia_total, nivel, describe_nivel, energia_mensal, dict_return = dados(conexao, usina['tabela'], colunas_energia, colunas_nivel, periodo, janela)
        if periodo == 'D':
            energia_mensal['data_hora'] = energia_mensal['data_hora'].dt.strftime('%Y-%m-%d')
        else:
            energia_mensal['data_hora'] = energia_mensal['data_hora'].dt.strftime('%Y-%m')
        energia_mensal = energia_mensal.set_index('data_hora')
        colunas_energia = [col for col in colunas_energia if 'energia' in col]
        energia_mensal = energia_mensal.drop(columns=colunas_energia)
        nivel = nivel.set_index('data_hora')
        st.session_state.energia_total = energia_total
        st.session_state.nivel = nivel
        st.session_state.describe_nivel = describe_nivel
        st.session_state.energia_mensal = energia_mensal
        st.session_state.dict_return = dict_return

        # carregar todas as colunas da tabela do banco de dados
        colunas = columns_table(conexao, usina['tabela'])
        # colunas = colunas.drop(columns=['id'])
        colunas = colunas['Field'].tolist()
        colunas.remove('id')
        st.session_state.colunas = colunas
    else:
        st.error('Erro ao conectar ao banco de dados')

def carregar_dados_selecionados(usina, colunas_selecionadas, tempo_inicial, tempo_final):
    conexao = conectar_db(usina['ip'], usina['usuario'], usina['senha'], usina['database'], usina['port'])
    df = read_where_data(conexao, usina['tabela'], tempo_inicial, tempo_final, colunas_selecionadas)
    return df

# Função para definir que os dados devem ser carregados
def set_load_data():
    st.session_state.load_data = True

def layout(usina):
    '''Cards do dashboard'''

    st.sidebar.title('Configuração')
    periodo = st.sidebar.selectbox('Período', ['Mensal', 'Diário'])
    janela = st.sidebar.number_input('Janela', value=180, min_value=1, max_value=365, step=1)
    btn_carregar = st.sidebar.button('Carregar', on_click=set_load_data)


    # Lógica para carregar os dados apenas quando o botão for clicado
    if st.session_state.load_data:
        st.session_state.stado = f"Dados carregados com período: {periodo} e janela: {janela}"
        carregar_dados(usina, periodo, janela)
        st.session_state.load_data = False
    else:
        if 'stado' not in st.session_state:
            print('periodo', periodo)
            print('janela', janela)
            st.session_state.stado = f"Dados carregados com período: {periodo} e janela: {janela}"
            carregar_dados(usina, periodo, janela)

    st.write(st.session_state.stado)
    colunas_energia = list(usina['energia'].values())
    colunas_nivel = list(usina['nivel'].values())

    energia_total = st.session_state.energia_total
    nivel = st.session_state.nivel
    describe_nivel = st.session_state.describe_nivel
    energia_mensal = st.session_state.energia_mensal
    dict_return = st.session_state.dict_return
    colunas = st.session_state.colunas

    cols = st.columns(len(dict_return))
    for i, (key, value) in enumerate(dict_return.items()):
        with cols[i]:
            create_energy_card(key, value['value'], value['data_hora'], value['medida'], value['percentual'], value['value_max'], value['value_min'])

    col1, col2 = st.columns(2)
    with col1:
        with st.container(border=True):
            periodo_text = 'Período: ' + periodo if periodo == 'Mensal' else 'Período: ' + periodo + ' dias'
            st.bar_chart(energia_mensal, stack=False, height=500)
        with st.expander('Energia Produzida' + periodo_text):
            st.write(energia_mensal)
    with col2:
        with st.container(border=True):
            st.write('Nível de água: as ultimas 24 horas')
            fig = px.line(
                    nivel,
                    x=nivel.index,
                    y=colunas_nivel[1::],
                    labels={'value': 'Nível de Água', 'variable': 'Tipo de Nível', 'data_hora': 'Data'}
                )
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        with st.expander('Nível de água'):
            st.write(nivel)

    st.divider()
    # criar 3 entradas para selecionar as colunas da tabela o tempo inicial e o tempo final
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        colunas_selecionadas = st.multiselect('Colunas', st.session_state.colunas)
    with col2:
        tempo_inicial = st.date_input('Tempo inicial', value=datetime.now() - timedelta(days=30))
    with col3:
        tempo_final = st.date_input('Tempo final', value=datetime.now())
    with col4:
        st.write(' ')
        st.write(' ')
        btn_carregar_dados = st.button('Carregar dados')

    # criar um botão para carregar os dados
    if btn_carregar_dados:
        colunas_selecionadas.append('data_hora')
        df = carregar_dados_selecionados(usina, colunas_selecionadas, tempo_inicial, tempo_final)

        # setar o index como data_hora
        df = df.set_index('data_hora')
        df = df.sort_index()
        colunas_selecionadas.remove('data_hora')

        # criar um gráfico de linha para cada coluna selecionada
        for coluna in colunas_selecionadas:
            st.write(coluna.replace('_', ' ').capitalize())
            fig = px.line(df, x=df.index, y=coluna)
            st.plotly_chart(fig, use_container_width=True)

        with st.expander('Dados selecionados'):
            st.write(df)
    # fazer um rodapé com as informações da usina
    st.divider()
    st.write(f'Usina: {usina["tabela"].replace("_", " ").capitalize()}')
    st.write('EngeSEP - Engenharia integrada de sistemas')
    st.write(f'Atualizado em: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}')


if st.session_state['logado']:
    menu_principal(config, st.session_state['usina'])
    layout(config['usinas'][st.session_state['usina']])
else:
    login(config, usinas)



Quantidade de linhas do arquivo main.py: 278 totalizando 803 linhas.
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
6 - Conteúdo do arquivo test_db.py:
¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
import streamlit as st
import sys
import os
import yaml
from datetime import datetime, timedelta
import time
# Adiciona o diretório raiz ao PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from libs.db import conectar_db, read_all_data, read_where_data, columns_table


def test_conexao_db(config):
    for key, value in config['usinas'].items():
        st.write(f"Testando a usina: {key}")
        ip = value['ip']
        usuario = value['usuario']
        senha = value['senha']
        banco_de_dados = value['database']
        tabela = value['tabela']
        port = value['port']
        inicio = time.time()
        conexao = conectar_db(ip, usuario, senha, banco_de_dados, port)
        if conexao:
            st.success("Conexão estabelecida com sucesso!")
        else:
            st.error("Falha ao conectar ao banco de dados")
        conexao.close()
        fim = time.time()
        st.write(f"Tempo de conexão: {fim - inicio} segundos")

def test_leitura_dados_db(config):
    for key, value in config['usinas'].items():
        st.write(f"Testando a usina: {key}")
        ip = value['ip']
        usuario = value['usuario']
        senha = value['senha']
        banco_de_dados = value['database']
        tabela = value['tabela']
        port = value['port']
        inicio = time.time()
        conexao = conectar_db(ip, usuario, senha, banco_de_dados, port)
        if conexao:
            st.success("Conexão estabelecida com sucesso!")
            dados = read_all_data(conexao, tabela)
            if dados is not None:
                st.success("Dados lidos com sucesso!")
                st.dataframe(dados.head())
            else:
                st.error("Erro ao ler dados da tabela")
        else:
            st.error("Falha ao conectar ao banco de dados")
        conexao.close()
        fim = time.time()
        st.write(f"Tempo de leitura de dados: {fim - inicio} segundos")


def test_leitura_dados_db_where(config):
    for key, value in config['usinas'].items():
        st.write(f"Testando a usina: {key}")
        ip = value['ip']
        usuario = value['usuario']
        senha = value['senha']
        banco_de_dados = value['database']
        tabela = value['tabela']
        port = value['port']
        inicio = time.time()
        conexao = conectar_db(ip, usuario, senha, banco_de_dados, port)
        if conexao:
            st.success("Conexão estabelecida com sucesso!")
            data_inicial = datetime.now() - timedelta(days=30)
            data_final = datetime.now()
            dados = read_where_data(conexao, tabela, data_inicial, data_final)
            if dados is not None:
                st.success("Dados lidos com sucesso!")
                st.dataframe(dados.head())
        else:
            st.error("Falha ao conectar ao banco de dados")
        conexao.close()
        fim = time.time()
        st.write(f"Tempo de leitura de dados: {fim - inicio} segundos")

def test_colunas_tabela(config):
    for key, value in config['usinas'].items():
        st.write(f"Testando a usina: {key}")
        ip = value['ip']
        usuario = value['usuario']
        senha = value['senha']
        banco_de_dados = value['database']
        tabela = value['tabela']
        port = value['port']
        inicio = time.time()
        conexao = conectar_db(ip, usuario, senha, banco_de_dados, port)
        if conexao:
            st.success("Conexão estabelecida com sucesso!")
            colunas = columns_table(conexao, tabela)
            if colunas is not None:
                st.success("Colunas lidas com sucesso!")
                st.dataframe(colunas.head())
        else:
            st.error("Falha ao conectar ao banco de dados")
        conexao.close()
        fim = time.time()
        st.write(f"Tempo de leitura de colunas: {fim - inicio} segundos")


def main():
    st.title("Teste de Conexão com Banco de Dados")

    # Obtém o caminho absoluto do diretório raiz
    root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    config_path = os.path.join(root_dir, "config", "usuarios_usinas.yaml")

    try:
        with open(config_path, "r") as file:
            config = yaml.safe_load(file)

        test_conexao_db(config)
        test_leitura_dados_db(config)
        test_leitura_dados_db_where(config)
        test_colunas_tabela(config)
    except FileNotFoundError:
        st.error(f"Arquivo de configuração não encontrado em: {config_path}")
    except Exception as e:
        st.error(f"Erro ao carregar configuração: {str(e)}")

if __name__ == "__main__":
    main()










Quantidade de linhas do arquivo test_db.py: 137 totalizando 940 linhas.